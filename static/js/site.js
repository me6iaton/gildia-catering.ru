(function($) {
  $.fn.extend({
    gphoto: function(options) {
      var provider, settings;
      settings = {
        provider: 'fotorama'
      };
      settings = $.extend(settings, options);
      provider = $.fn.gphoto.provider;
      return this.filter("[href ^= https\\:\\/\\/plus\\.google\\.com\\/photos]").each(function() {
        var $link, albumId, url, userId;
        $link = $(this);
        url = new URI($link.attr('href'));
        userId = url.segment(1);
        albumId = url.segment(3);
        return $.getJSON("https://picasaweb.google.com/data/feed/api/user/" + userId + "/albumid/" + albumId + "?kind=photo&access=public&alt=json-in-script&callback=?", function(data, status) {
          var images;
          images = data.feed.entry.map(function(image) {
            var imageUrl;
            url = new URI(image.content.src);
            imageUrl = (url.protocol()) + "://" + (url.host()) + (url.directory());
            return provider[settings.provider].filter.call(settings, imageUrl, image);
          });
          provider[settings.provider].insert.call(settings, $link, images);
        });
      });
    }
  });
  return $.fn.gphoto.provider = {
    fotorama: {
      filter: function(imageUrl, image) {
        return {
          img: imageUrl + "w0/",
          thumb: imageUrl + "w64-h64/"
        };
      },
      insert: function($link, images) {
        var $fotorama;
        $fotorama = $('<div class="fotorama"></div>');
        $link.replaceWith($fotorama);
        $fotorama.fotorama($.extend({
          data: images
        }, this));
      }
    },
    ggrid: {
      filter: function(imageUrl, image) {
        return {
          imageUrl: imageUrl,
          data: image
        };
      },
      insert: function($link, images) {
        var $ggrid, options;
        $ggrid = $('<div class="ggrid"></div>');
        options = {
          data: images
        };
        if ($link.attr("title") != null) {
          options['template'] = $link.attr("title");
        }
        $link.replaceWith($ggrid);
        $ggrid.ggrid($.extend(options, this));
        $ggrid.find('a').fluidbox();
      }
    }
  };
})(jQuery);

(function($) {
  return $.fn.extend({
    ggrid: function(options) {
      var $this, chunk, i, images, iter, methods, settings, template;
      $this = this;
      settings = {
        columns: 4,
        maxWidth: 1170,
        padding: 5
      };
      settings = $.extend(settings, options);
      methods = {
        makeRow: function(images) {
          var $out, constanta, image, j, len, maxWidth, width;
          $out = $("<div data-paragraph-count='" + images.length + "' class='row'></div>");
          constanta = 1 / images.reduceRight(function(one, two) {
            if (images.length !== 1) {
              return (one.data ? 1 / (Number(one.data.gphoto$height.$t) / Number(one.data.gphoto$width.$t)) : one) + 1 / (Number(two.data.gphoto$height.$t) / Number(two.data.gphoto$width.$t));
            }
          });
          for (j = 0, len = images.length; j < len; j++) {
            image = images[j];
            if (images.length !== 1) {
              width = constanta / (Number(image.data.gphoto$height.$t) / Number(image.data.gphoto$width.$t)) * 100;
              maxWidth = Math.round(settings.maxWidth / 100 * width);
            } else {
              width = 100;
              maxWidth = 0;
            }
            $out.append("<div class='col' style='width: " + width + "%;'>\n  <a href=\"" + image.imageUrl + "/w0/\">\n    <img class='img-responsive' src='" + image.imageUrl + "/w" + maxWidth + "/' alt='' />\n  </a>\n</div>");
          }
          $this.append($out);
        }
      };
      images = options.data;
      if (options.template != null) {
        template = options.template.split('-');
      }
      chunk;
      i = 0;
      iter = 0;
      while (i < images.length) {
        if (template != null ? template[iter] : void 0) {
          chunk = Number(template[iter]);
          iter++;
        } else {
          chunk = images.length - (i + settings.columns) === 1 ? settings.columns - 1 : settings.columns;
        }
        methods.makeRow(images.slice(i, i + chunk));
        i += chunk;
      }
      return this.each(function() {
        console.log('ggrid');
      });
    }
  });
})(jQuery);

(function($) {
  return $(function() {
    var TimerInterval, lightbox, sliderTimerHover, swiperCarousel, transform;
    $('.dropdown-full').hover(function() {
      if (!$(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    }, function() {
      if ($(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    });
    $('.hypher').hyphenate('ru');
    TimerInterval = function(callback, delay) {
      var remaining, timerId;
      timerId = void 0;
      remaining = delay;
      this.pause = function() {
        return clearTimeout(timerId);
      };
      this.resume = function() {
        clearTimeout(timerId);
        return timerId = setInterval(callback, remaining);
      };
      return this.resume();
    };
    $('#serviceTabs a:first').tab('show');
    sliderTimerHover = null;
    $('#serviceTabs .tab').hover(function() {
      if (sliderTimerHover) {
        clearTimeout(sliderTimerHover);
      }
      return sliderTimerHover = setTimeout((function(_this) {
        return function() {
          return $(_this).tab('show');
        };
      })(this), $('#serviceSlider').data('sliderTimeoutHover'));
    });
    $('#serviceSlider .icon-right').click(function() {
      var $next;
      $next = $('#serviceTabs .active').next().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:first');
      }
      return $next.tab('show');
    });
    $('#serviceSlider .icon-left').click(function() {
      var $next;
      $next = $('#serviceTabs .active').prev().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:last');
      }
      return $next.tab('show');
    });
    transform = function(a, b) {
      b.classList.remove('hidden');
      ramjet.transform(a, b, {
        done: function() {
          b.classList.remove('hidden');
          if ($(a).hasClass('whyus-intro')) {
            return $('.whyus').css('min-height', $(b).find('.row').innerHeight() + 20);
          } else {
            return $('.whyus').css('min-height', '');
          }
        }
      });
      a.classList.add('hidden');
      return b.classList.add('hidden');
    };
    $('.whyus-intro').click(function() {
      return transform(this, this.nextSibling);
    });
    $('.whyus-detail').click(function() {
      return transform(this, this.previousSibling);
    });
    lightbox = function(slector) {
      return $(slector).magnificPopup({
        delegate: 'a',
        type: 'image',
        closeOnContentClick: false,
        closeBtnInside: false,
        mainClass: 'mfp-with-zoom mfp-img-mobile',
        image: {
          verticalFit: true
        },
        gallery: {
          enabled: true
        },
        zoom: {
          enabled: true,
          duration: 300,
          opener: function(element) {
            return element.find('img');
          }
        }
      });
    };
    $.fn.gphoto.provider['ggrid'] = {
      filter: function(imageUrl, image) {
        return {
          imageUrl: imageUrl,
          data: image
        };
      },
      insert: function($link, images) {
        var $ggrid, options;
        $ggrid = $('<div class="ggrid"></div>');
        options = {
          data: images
        };
        if ($link.attr("title") != null) {
          options['template'] = $link.attr("title");
        }
        $link.replaceWith($ggrid);
        $ggrid.ggrid($.extend(options, this));
        if (this.lightbox) {
          return lightbox(".ggrid");
        }
      }
    };
    $('a.gphoto-ggrid-lightbox').gphoto({
      provider: 'ggrid',
      columns: 3,
      maxWidth: 1170,
      padding: 5,
      lightbox: true
    });
    $('a.gphoto-ggrid-about').gphoto({
      provider: 'ggrid',
      columns: 2,
      maxWidth: 557,
      padding: 5,
      template: '1-2-2',
      lightbox: true
    });
    $.fn.gphoto.provider['swiper'] = {
      filter: function(imageUrl, image) {
        return {
          image: imageUrl + "/" + this.imageSize + "/",
          thumb: imageUrl + "/" + this.thumbSize + "/"
        };
      },
      insert: function($link, images) {
        var $swiper, $swiperWrapper, btnCntrSelector;
        $swiper = $('<div class="swiper-container"></div>');
        $swiperWrapper = $('<div class="swiper-wrapper"></div>');
        $.each(images, function(index, element) {
          return $swiperWrapper.append("<div class=\"swiper-slide\">\n   <a href=\"" + element.image + "\" data-effect=\"mfp-zoom-in\">\n      <img src=\"" + element.thumb + "\" class=\"img-responsive\"/>\n    </a>\n</div>");
        });
        $swiper.append($swiperWrapper);
        $swiper.addClass(this.containerClass);
        $link.replaceWith($swiper);
        btnCntrSelector = $link.data("buttonContainer");
        new Swiper($swiper, jQuery.extend(this.swiper, {
          nextButton: btnCntrSelector + " .swiper-button-next",
          prevButton: btnCntrSelector + " .swiper-button-prev"
        }));
        return lightbox("." + this.containerClass);
      }
    };
    $('a.swiper-link-gallery').gphoto({
      provider: 'swiper',
      imageSize: 'w1600',
      thumbSize: 'w300-h300-c',
      containerClass: 'swiper-gallery',
      swiper: {
        paginationClickable: true,
        effect: 'coverflow',
        grabCursor: true,
        centeredSlides: false,
        slidesPerView: 'auto',
        coverflow: {
          rotate: 50,
          stretch: 0,
          depth: 100,
          modifier: 1,
          slideShadows: true
        }
      }
    });
    $('a.swiper-link-carousel').gphoto({
      provider: 'swiper',
      imageSize: 'w1600',
      thumbSize: 'w300-h200-c',
      containerClass: 'swiper-carousel',
      swiper: {
        loop: true,
        nextButton: '#swiperCarouselBtn .swiper-button-next',
        prevButton: '#swiperCarouselBtn .swiper-button-prev',
        slidesPerView: 4,
        slidesPerGroup: 4,
        paginationClickable: true,
        spaceBetween: 20
      }
    });
    swiperCarousel = new Swiper('.swiper-carousel', {
      loop: true,
      nextButton: '#btnClients .swiper-button-next',
      prevButton: '#btnClients .swiper-button-prev',
      slidesPerView: 4,
      slidesPerGroup: 4,
      paginationClickable: true,
      spaceBetween: 20
    });
    $("#food .nav-btns-menu a").click(function(e) {
      e.preventDefault();
      $(this).parent().find('a').removeClass('selected');
      $(this).addClass('selected');
      return $(this).tab('show');
    });
    $('#food .nav-btns-person a').click(function(e) {
      e.preventDefault();
      $(this).closest('.tab-pane').find('.nav-btns-person a').removeClass('selected');
      $(this).addClass('selected');
      $(this).closest('.tab-pane').find('.nav-btns-person a[href="' + $(this).attr('href') + '"]').addClass('selected');
      return $(this).tab('show');
    });
    $('#food .nav-btns-person:hidden a:nth-child(1)').click();
    $('#food .nav-btns-menu a:first').click();
    return $('#food .table').each(function() {
      return $('tr.td').filter(':odd').addClass('even');
    });
  });
})(jQuery);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5ncGhvdG8uY29mZmVlIiwianF1ZXJ5LmdncmlkLmNvZmZlZSIsInNpdGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsU0FBQyxDQUFELEdBQUE7QUFDQyxFQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTCxDQUNFO0FBQUEsSUFBQSxNQUFBLEVBQVEsU0FBQyxPQUFELEdBQUE7QUFDTixVQUFBLGtCQUFBO0FBQUEsTUFBQSxRQUFBLEdBQ0U7QUFBQSxRQUFBLFFBQUEsRUFBVSxVQUFWO09BREYsQ0FBQTtBQUFBLE1BR0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxNQUFGLENBQVMsUUFBVCxFQUFtQixPQUFuQixDQUhYLENBQUE7QUFBQSxNQUlBLFFBQUEsR0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUp2QixDQUFBO0FBT0EsYUFBTyxJQUFDLENBQUMsTUFBRixDQUFTLHNEQUFULENBQWdFLENBQUMsSUFBakUsQ0FBc0UsU0FBQSxHQUFBO0FBQzNFLFlBQUEsMkJBQUE7QUFBQSxRQUFBLEtBQUEsR0FBUSxDQUFBLENBQUUsSUFBRixDQUFSLENBQUE7QUFBQSxRQUNBLEdBQUEsR0FBVSxJQUFBLEdBQUEsQ0FBSSxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsQ0FBSixDQURWLENBQUE7QUFBQSxRQUVBLE1BQUEsR0FBUyxHQUFHLENBQUMsT0FBSixDQUFZLENBQVosQ0FGVCxDQUFBO0FBQUEsUUFHQSxPQUFBLEdBQVUsR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFaLENBSFYsQ0FBQTtlQUlBLENBQUMsQ0FBQyxPQUFGLENBQ0Usa0RBQUEsR0FBbUQsTUFBbkQsR0FBMEQsV0FBMUQsR0FBcUUsT0FBckUsR0FBNkUseURBRC9FLEVBRUUsU0FBQyxJQUFELEVBQU8sTUFBUCxHQUFBO0FBQ0UsY0FBQSxNQUFBO0FBQUEsVUFBQSxNQUFBLEdBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBaEIsQ0FBb0IsU0FBQyxLQUFELEdBQUE7QUFDM0IsZ0JBQUEsUUFBQTtBQUFBLFlBQUEsR0FBQSxHQUFXLElBQUEsR0FBQSxDQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBbEIsQ0FBWCxDQUFBO0FBQUEsWUFDQSxRQUFBLEdBQWEsQ0FBQyxHQUFHLENBQUMsUUFBSixDQUFBLENBQUQsQ0FBQSxHQUFnQixLQUFoQixHQUFvQixDQUFDLEdBQUcsQ0FBQyxJQUFKLENBQUEsQ0FBRCxDQUFwQixHQUFpQyxDQUFDLEdBQUcsQ0FBQyxTQUFKLENBQUEsQ0FBRCxDQUQ5QyxDQUFBO21CQUVBLFFBQVMsQ0FBQSxRQUFRLENBQUMsUUFBVCxDQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFuQyxDQUF3QyxRQUF4QyxFQUFrRCxRQUFsRCxFQUE0RCxLQUE1RCxFQUgyQjtVQUFBLENBQXBCLENBQVQsQ0FBQTtBQUFBLFVBSUEsUUFBUyxDQUFBLFFBQVEsQ0FBQyxRQUFULENBQWtCLENBQUMsTUFBTSxDQUFDLElBQW5DLENBQXdDLFFBQXhDLEVBQWtELEtBQWxELEVBQXlELE1BQXpELENBSkEsQ0FERjtRQUFBLENBRkYsRUFMMkU7TUFBQSxDQUF0RSxDQUFQLENBUk07SUFBQSxDQUFSO0dBREYsQ0FBQSxDQUFBO1NBMEJBLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVosR0FDRTtBQUFBLElBQUEsUUFBQSxFQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVEsU0FBQyxRQUFELEVBQVcsS0FBWCxHQUFBO2VBQ047QUFBQSxVQUFBLEdBQUEsRUFBUSxRQUFELEdBQVUsS0FBakI7QUFBQSxVQUNBLEtBQUEsRUFBVSxRQUFELEdBQVUsVUFEbkI7VUFETTtNQUFBLENBQVI7QUFBQSxNQUdBLE1BQUEsRUFBUSxTQUFDLEtBQUQsRUFBUSxNQUFSLEdBQUE7QUFDTixZQUFBLFNBQUE7QUFBQSxRQUFBLFNBQUEsR0FBWSxDQUFBLENBQUUsOEJBQUYsQ0FBWixDQUFBO0FBQUEsUUFDQSxLQUFLLENBQUMsV0FBTixDQUFrQixTQUFsQixDQURBLENBQUE7QUFBQSxRQUVBLFNBQVMsQ0FBQyxRQUFWLENBQW1CLENBQUMsQ0FBQyxNQUFGLENBQVM7QUFBQSxVQUFBLElBQUEsRUFBTSxNQUFOO1NBQVQsRUFBdUIsSUFBdkIsQ0FBbkIsQ0FGQSxDQURNO01BQUEsQ0FIUjtLQURGO0FBQUEsSUFTQSxLQUFBLEVBQ0U7QUFBQSxNQUFBLE1BQUEsRUFBUSxTQUFDLFFBQUQsRUFBVyxLQUFYLEdBQUE7ZUFDTjtBQUFBLFVBQUEsUUFBQSxFQUFVLFFBQVY7QUFBQSxVQUNBLElBQUEsRUFBTSxLQUROO1VBRE07TUFBQSxDQUFSO0FBQUEsTUFHQSxNQUFBLEVBQVEsU0FBQyxLQUFELEVBQVEsTUFBUixHQUFBO0FBQ04sWUFBQSxlQUFBO0FBQUEsUUFBQSxNQUFBLEdBQVMsQ0FBQSxDQUFFLDJCQUFGLENBQVQsQ0FBQTtBQUFBLFFBQ0EsT0FBQSxHQUFVO0FBQUEsVUFBQSxJQUFBLEVBQU0sTUFBTjtTQURWLENBQUE7QUFFQSxRQUFBLElBQUcsMkJBQUg7QUFDRSxVQUFBLE9BQVEsQ0FBQSxVQUFBLENBQVIsR0FBdUIsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYLENBQXZCLENBREY7U0FGQTtBQUFBLFFBSUEsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsTUFBbEIsQ0FKQSxDQUFBO0FBQUEsUUFLQSxNQUFNLENBQUMsS0FBUCxDQUFhLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQixJQUFsQixDQUFiLENBTEEsQ0FBQTtBQUFBLFFBTUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxHQUFaLENBQWdCLENBQUMsUUFBakIsQ0FBQSxDQU5BLENBRE07TUFBQSxDQUhSO0tBVkY7SUE1Qkg7QUFBQSxDQUFELENBQUEsQ0FrREUsTUFsREYsQ0FBQSxDQUFBOztBQ0FBLENBQUMsU0FBQyxDQUFELEdBQUE7U0FDQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQUwsQ0FDRTtBQUFBLElBQUEsS0FBQSxFQUFPLFNBQUMsT0FBRCxHQUFBO0FBQ0wsVUFBQSwwREFBQTtBQUFBLE1BQUEsS0FBQSxHQUFRLElBQVIsQ0FBQTtBQUFBLE1BRUEsUUFBQSxHQUNFO0FBQUEsUUFBQSxPQUFBLEVBQVMsQ0FBVDtBQUFBLFFBQ0EsUUFBQSxFQUFVLElBRFY7QUFBQSxRQUVBLE9BQUEsRUFBUyxDQUZUO09BSEYsQ0FBQTtBQUFBLE1BT0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxNQUFGLENBQVMsUUFBVCxFQUFtQixPQUFuQixDQVBYLENBQUE7QUFBQSxNQVNBLE9BQUEsR0FDRTtBQUFBLFFBQUEsT0FBQSxFQUFTLFNBQUMsTUFBRCxHQUFBO0FBQ1AsY0FBQSwrQ0FBQTtBQUFBLFVBQUEsSUFBQSxHQUFPLENBQUEsQ0FBRSw2QkFBQSxHQUE4QixNQUFNLENBQUMsTUFBckMsR0FBNEMsc0JBQTlDLENBQVAsQ0FBQTtBQUFBLFVBQ0EsU0FBQSxHQUFZLENBQUEsR0FBRSxNQUFNLENBQUMsV0FBUCxDQUFtQixTQUFDLEdBQUQsRUFBTSxHQUFOLEdBQUE7QUFDL0IsWUFBQSxJQUErSyxNQUFNLENBQUMsTUFBUCxLQUFpQixDQUFoTTtxQkFBQSxDQUFJLEdBQUcsQ0FBQyxJQUFQLEdBQWlCLENBQUEsR0FBRSxDQUFDLE1BQUEsQ0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUE5QixDQUFBLEdBQWtDLE1BQUEsQ0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUE3QixDQUFuQyxDQUFuQixHQUE2RixHQUE5RixDQUFBLEdBQXFHLENBQUEsR0FBRSxDQUFDLE1BQUEsQ0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUE5QixDQUFBLEdBQWtDLE1BQUEsQ0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUE3QixDQUFuQyxFQUF2RzthQUQrQjtVQUFBLENBQW5CLENBRGQsQ0FBQTtBQUdBLGVBQUEsd0NBQUE7OEJBQUE7QUFDRSxZQUFBLElBQUcsTUFBTSxDQUFDLE1BQVAsS0FBaUIsQ0FBcEI7QUFDRSxjQUFBLEtBQUEsR0FBUSxTQUFBLEdBQVUsQ0FBQyxNQUFBLENBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBaEMsQ0FBQSxHQUFvQyxNQUFBLENBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBL0IsQ0FBckMsQ0FBVixHQUFxRixHQUE3RixDQUFBO0FBQUEsY0FDQSxRQUFBLEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBWSxRQUFRLENBQUMsUUFBVCxHQUFrQixHQUFsQixHQUF3QixLQUFwQyxDQURYLENBREY7YUFBQSxNQUFBO0FBSUUsY0FBQSxLQUFBLEdBQVEsR0FBUixDQUFBO0FBQUEsY0FDQSxRQUFBLEdBQVcsQ0FEWCxDQUpGO2FBQUE7QUFBQSxZQU1BLElBQUksQ0FBQyxNQUFMLENBQVksaUNBQUEsR0FDdUIsS0FEdkIsR0FDNkIsb0JBRDdCLEdBRUcsS0FBSyxDQUFDLFFBRlQsR0FFa0IsZ0RBRmxCLEdBRzZCLEtBQUssQ0FBQyxRQUhuQyxHQUc0QyxJQUg1QyxHQUdnRCxRQUhoRCxHQUd5RCw4QkFIckUsQ0FOQSxDQURGO0FBQUEsV0FIQTtBQUFBLFVBaUJBLEtBQUssQ0FBQyxNQUFOLENBQWEsSUFBYixDQWpCQSxDQURPO1FBQUEsQ0FBVDtPQVZGLENBQUE7QUFBQSxNQStCQSxNQUFBLEdBQVUsT0FBTyxDQUFDLElBL0JsQixDQUFBO0FBZ0NBLE1BQUEsSUFBMEMsd0JBQTFDO0FBQUEsUUFBQSxRQUFBLEdBQVcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFqQixDQUF1QixHQUF2QixDQUFYLENBQUE7T0FoQ0E7QUFBQSxNQWlDQSxLQWpDQSxDQUFBO0FBQUEsTUFpQ08sQ0FBQSxHQUFJLENBakNYLENBQUE7QUFBQSxNQWlDYyxJQUFBLEdBQU8sQ0FqQ3JCLENBQUE7QUFrQ0EsYUFBTSxDQUFBLEdBQUksTUFBTSxDQUFDLE1BQWpCLEdBQUE7QUFDRSxRQUFBLHVCQUFHLFFBQVUsQ0FBQSxJQUFBLFVBQWI7QUFFRSxVQUFBLEtBQUEsR0FBUSxNQUFBLENBQU8sUUFBUyxDQUFBLElBQUEsQ0FBaEIsQ0FBUixDQUFBO0FBQUEsVUFDQSxJQUFBLEVBREEsQ0FGRjtTQUFBLE1BQUE7QUFNRSxVQUFBLEtBQUEsR0FBVyxNQUFNLENBQUMsTUFBUCxHQUFnQixDQUFDLENBQUEsR0FBSSxRQUFRLENBQUMsT0FBZCxDQUFoQixLQUEwQyxDQUE3QyxHQUFvRCxRQUFRLENBQUMsT0FBVCxHQUFtQixDQUF2RSxHQUE4RSxRQUFRLENBQUMsT0FBL0YsQ0FORjtTQUFBO0FBQUEsUUFPQSxPQUFPLENBQUMsT0FBUixDQUFnQixNQUFNLENBQUMsS0FBUCxDQUFhLENBQWIsRUFBZSxDQUFBLEdBQUUsS0FBakIsQ0FBaEIsQ0FQQSxDQUFBO0FBQUEsUUFRQSxDQUFBLElBQUcsS0FSSCxDQURGO01BQUEsQ0FsQ0E7QUE2Q0EsYUFBTyxJQUFDLENBQUMsSUFBRixDQUFPLFNBQUEsR0FBQTtBQUNaLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaLENBQUEsQ0FEWTtNQUFBLENBQVAsQ0FBUCxDQTlDSztJQUFBLENBQVA7R0FERixFQUREO0FBQUEsQ0FBRCxDQUFBLENBbURFLE1BbkRGLENBQUEsQ0FBQTs7QUNBQSxDQUFDLFNBQUMsQ0FBRCxHQUFBO1NBQ0MsQ0FBQSxDQUFFLFNBQUEsR0FBQTtBQUVBLFFBQUEsb0VBQUE7QUFBQSxJQUFBLENBQUEsQ0FBRSxnQkFBRixDQUFtQixDQUFDLEtBQXBCLENBQTBCLFNBQUEsR0FBQTtBQUN4QixNQUFBLElBQUksQ0FBQSxDQUFDLENBQUUsSUFBRixDQUFJLENBQUMsUUFBTCxDQUFjLE1BQWQsQ0FBTDtlQUNFLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FBNkIsQ0FBQyxRQUE5QixDQUF1QyxRQUF2QyxFQURGO09BRHdCO0lBQUEsQ0FBMUIsRUFHQyxTQUFBLEdBQUE7QUFDQyxNQUFBLElBQUksQ0FBQSxDQUFFLElBQUYsQ0FBSSxDQUFDLFFBQUwsQ0FBYyxNQUFkLENBQUo7ZUFDRSxDQUFBLENBQUUsSUFBRixDQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBQTZCLENBQUMsUUFBOUIsQ0FBdUMsUUFBdkMsRUFERjtPQUREO0lBQUEsQ0FIRCxDQUFBLENBQUE7QUFBQSxJQVNBLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxTQUFiLENBQXVCLElBQXZCLENBVEEsQ0FBQTtBQUFBLElBWUEsYUFBQSxHQUFnQixTQUFDLFFBQUQsRUFBVyxLQUFYLEdBQUE7QUFDZCxVQUFBLGtCQUFBO0FBQUEsTUFBQSxPQUFBLEdBQVUsTUFBVixDQUFBO0FBQUEsTUFDQSxTQUFBLEdBQVksS0FEWixDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsS0FBRCxHQUFTLFNBQUEsR0FBQTtlQUNQLFlBQUEsQ0FBYSxPQUFiLEVBRE87TUFBQSxDQUZULENBQUE7QUFBQSxNQUlBLElBQUMsQ0FBQSxNQUFELEdBQVUsU0FBQSxHQUFBO0FBQ1IsUUFBQSxZQUFBLENBQWEsT0FBYixDQUFBLENBQUE7ZUFDQSxPQUFBLEdBQVUsV0FBQSxDQUFZLFFBQVosRUFBc0IsU0FBdEIsRUFGRjtNQUFBLENBSlYsQ0FBQTthQU9BLElBQUMsQ0FBQSxNQUFELENBQUEsRUFSYztJQUFBLENBWmhCLENBQUE7QUFBQSxJQXNCQSxDQUFBLENBQUUsc0JBQUYsQ0FBeUIsQ0FBQyxHQUExQixDQUE4QixNQUE5QixDQXRCQSxDQUFBO0FBQUEsSUE0QkEsZ0JBQUEsR0FBbUIsSUE1Qm5CLENBQUE7QUFBQSxJQTZCQSxDQUFBLENBQUUsbUJBQUYsQ0FBc0IsQ0FBQyxLQUF2QixDQUE2QixTQUFBLEdBQUE7QUFDM0IsTUFBQSxJQUFrQyxnQkFBbEM7QUFBQSxRQUFBLFlBQUEsQ0FBYSxnQkFBYixDQUFBLENBQUE7T0FBQTthQUNBLGdCQUFBLEdBQW1CLFVBQUEsQ0FBWSxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQSxHQUFBO2lCQUM3QixDQUFBLENBQUUsS0FBRixDQUFJLENBQUMsR0FBTCxDQUFTLE1BQVQsRUFENkI7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFaLEVBRWpCLENBQUEsQ0FBRSxnQkFBRixDQUFtQixDQUFDLElBQXBCLENBQXlCLG9CQUF6QixDQUZpQixFQUZRO0lBQUEsQ0FBN0IsQ0E3QkEsQ0FBQTtBQUFBLElBeUNBLENBQUEsQ0FBRSw0QkFBRixDQUErQixDQUFDLEtBQWhDLENBQXNDLFNBQUEsR0FBQTtBQUNwQyxVQUFBLEtBQUE7QUFBQSxNQUFBLEtBQUEsR0FBUSxDQUFBLENBQUUsc0JBQUYsQ0FBeUIsQ0FBQyxJQUExQixDQUFBLENBQWdDLENBQUMsSUFBakMsQ0FBc0MsR0FBdEMsQ0FBUixDQUFBO0FBQ0EsTUFBQSxJQUFzQyxDQUFBLEtBQU0sQ0FBQyxNQUE3QztBQUFBLFFBQUEsS0FBQSxHQUFRLENBQUEsQ0FBRSxzQkFBRixDQUFSLENBQUE7T0FEQTthQUVBLEtBQUssQ0FBQyxHQUFOLENBQVUsTUFBVixFQUhvQztJQUFBLENBQXRDLENBekNBLENBQUE7QUFBQSxJQTZDQSxDQUFBLENBQUUsMkJBQUYsQ0FBOEIsQ0FBQyxLQUEvQixDQUFxQyxTQUFBLEdBQUE7QUFDbkMsVUFBQSxLQUFBO0FBQUEsTUFBQSxLQUFBLEdBQVEsQ0FBQSxDQUFFLHNCQUFGLENBQXlCLENBQUMsSUFBMUIsQ0FBQSxDQUFnQyxDQUFDLElBQWpDLENBQXNDLEdBQXRDLENBQVIsQ0FBQTtBQUNBLE1BQUEsSUFBcUMsQ0FBQSxLQUFNLENBQUMsTUFBNUM7QUFBQSxRQUFBLEtBQUEsR0FBUSxDQUFBLENBQUUscUJBQUYsQ0FBUixDQUFBO09BREE7YUFFQSxLQUFLLENBQUMsR0FBTixDQUFVLE1BQVYsRUFIbUM7SUFBQSxDQUFyQyxDQTdDQSxDQUFBO0FBQUEsSUFvREEsU0FBQSxHQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUosR0FBQTtBQUVWLE1BQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFaLENBQW1CLFFBQW5CLENBQUEsQ0FBQTtBQUFBLE1BQ0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUI7QUFBQSxRQUFBLElBQUEsRUFBTSxTQUFBLEdBQUE7QUFFM0IsVUFBQSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQVosQ0FBbUIsUUFBbkIsQ0FBQSxDQUFBO0FBQ0EsVUFBQSxJQUFHLENBQUEsQ0FBRSxDQUFGLENBQUksQ0FBQyxRQUFMLENBQWMsYUFBZCxDQUFIO21CQUNFLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxHQUFaLENBQWdCLFlBQWhCLEVBQThCLENBQUEsQ0FBRSxDQUFGLENBQUksQ0FBQyxJQUFMLENBQVUsTUFBVixDQUFpQixDQUFDLFdBQWxCLENBQUEsQ0FBQSxHQUFrQyxFQUFoRSxFQURGO1dBQUEsTUFBQTttQkFHRSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsR0FBWixDQUFnQixZQUFoQixFQUE4QixFQUE5QixFQUhGO1dBSDJCO1FBQUEsQ0FBTjtPQUF2QixDQURBLENBQUE7QUFBQSxNQVNBLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBWixDQUFnQixRQUFoQixDQVRBLENBQUE7YUFVQSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQVosQ0FBZ0IsUUFBaEIsRUFaVTtJQUFBLENBcERaLENBQUE7QUFBQSxJQWtFQSxDQUFBLENBQUUsY0FBRixDQUFpQixDQUFDLEtBQWxCLENBQXdCLFNBQUEsR0FBQTthQUFHLFNBQUEsQ0FBVSxJQUFWLEVBQWEsSUFBQyxDQUFDLFdBQWYsRUFBSDtJQUFBLENBQXhCLENBbEVBLENBQUE7QUFBQSxJQW1FQSxDQUFBLENBQUUsZUFBRixDQUFrQixDQUFDLEtBQW5CLENBQXlCLFNBQUEsR0FBQTthQUFHLFNBQUEsQ0FBVSxJQUFWLEVBQWEsSUFBQyxDQUFDLGVBQWYsRUFBSDtJQUFBLENBQXpCLENBbkVBLENBQUE7QUFBQSxJQXNFQSxRQUFBLEdBQVcsU0FBQyxPQUFELEdBQUE7YUFDVCxDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsYUFBWCxDQUNFO0FBQUEsUUFBQSxRQUFBLEVBQVUsR0FBVjtBQUFBLFFBQ0EsSUFBQSxFQUFNLE9BRE47QUFBQSxRQUVBLG1CQUFBLEVBQXFCLEtBRnJCO0FBQUEsUUFHQSxjQUFBLEVBQWdCLEtBSGhCO0FBQUEsUUFJQSxTQUFBLEVBQVcsOEJBSlg7QUFBQSxRQUtBLEtBQUEsRUFDRTtBQUFBLFVBQUEsV0FBQSxFQUFhLElBQWI7U0FORjtBQUFBLFFBT0EsT0FBQSxFQUFTO0FBQUEsVUFBQSxPQUFBLEVBQVMsSUFBVDtTQVBUO0FBQUEsUUFRQSxJQUFBLEVBQ0U7QUFBQSxVQUFBLE9BQUEsRUFBUyxJQUFUO0FBQUEsVUFDQSxRQUFBLEVBQVUsR0FEVjtBQUFBLFVBRUEsTUFBQSxFQUFRLFNBQUMsT0FBRCxHQUFBO21CQUNOLE9BQU8sQ0FBQyxJQUFSLENBQWEsS0FBYixFQURNO1VBQUEsQ0FGUjtTQVRGO09BREYsRUFEUztJQUFBLENBdEVYLENBQUE7QUFBQSxJQXNGQSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsT0FBQSxDQUFyQixHQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVEsU0FBQyxRQUFELEVBQVcsS0FBWCxHQUFBO2VBQ047QUFBQSxVQUFBLFFBQUEsRUFBVSxRQUFWO0FBQUEsVUFDQSxJQUFBLEVBQU0sS0FETjtVQURNO01BQUEsQ0FBUjtBQUFBLE1BR0EsTUFBQSxFQUFRLFNBQUMsS0FBRCxFQUFRLE1BQVIsR0FBQTtBQUNOLFlBQUEsZUFBQTtBQUFBLFFBQUEsTUFBQSxHQUFTLENBQUEsQ0FBRSwyQkFBRixDQUFULENBQUE7QUFBQSxRQUNBLE9BQUEsR0FBVTtBQUFBLFVBQUEsSUFBQSxFQUFNLE1BQU47U0FEVixDQUFBO0FBRUEsUUFBQSxJQUFHLDJCQUFIO0FBQ0UsVUFBQSxPQUFRLENBQUEsVUFBQSxDQUFSLEdBQXVCLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBWCxDQUF2QixDQURGO1NBRkE7QUFBQSxRQUlBLEtBQUssQ0FBQyxXQUFOLENBQWtCLE1BQWxCLENBSkEsQ0FBQTtBQUFBLFFBS0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxDQUFDLENBQUMsTUFBRixDQUFTLE9BQVQsRUFBa0IsSUFBbEIsQ0FBYixDQUxBLENBQUE7QUFNQSxRQUFBLElBQXNCLElBQUMsQ0FBQyxRQUF4QjtpQkFBQSxRQUFBLENBQVMsUUFBVCxFQUFBO1NBUE07TUFBQSxDQUhSO0tBdkZGLENBQUE7QUFBQSxJQW1HQSxDQUFBLENBQUUseUJBQUYsQ0FBNEIsQ0FBQyxNQUE3QixDQUNFO0FBQUEsTUFBQSxRQUFBLEVBQVUsT0FBVjtBQUFBLE1BQ0EsT0FBQSxFQUFTLENBRFQ7QUFBQSxNQUVBLFFBQUEsRUFBVSxJQUZWO0FBQUEsTUFHQSxPQUFBLEVBQVMsQ0FIVDtBQUFBLE1BSUEsUUFBQSxFQUFVLElBSlY7S0FERixDQW5HQSxDQUFBO0FBQUEsSUEyR0EsQ0FBQSxDQUFFLHNCQUFGLENBQXlCLENBQUMsTUFBMUIsQ0FDRTtBQUFBLE1BQUEsUUFBQSxFQUFVLE9BQVY7QUFBQSxNQUNBLE9BQUEsRUFBUyxDQURUO0FBQUEsTUFFQSxRQUFBLEVBQVUsR0FGVjtBQUFBLE1BR0EsT0FBQSxFQUFTLENBSFQ7QUFBQSxNQUlBLFFBQUEsRUFBVSxPQUpWO0FBQUEsTUFLQSxRQUFBLEVBQVUsSUFMVjtLQURGLENBM0dBLENBQUE7QUFBQSxJQXFIQSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsUUFBQSxDQUFyQixHQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVEsU0FBQyxRQUFELEVBQVcsS0FBWCxHQUFBO2VBQ047QUFBQSxVQUFBLEtBQUEsRUFBVSxRQUFELEdBQVUsR0FBVixHQUFhLElBQUMsQ0FBQyxTQUFmLEdBQXlCLEdBQWxDO0FBQUEsVUFDQSxLQUFBLEVBQVUsUUFBRCxHQUFVLEdBQVYsR0FBYSxJQUFDLENBQUMsU0FBZixHQUF5QixHQURsQztVQURNO01BQUEsQ0FBUjtBQUFBLE1BR0EsTUFBQSxFQUFRLFNBQUMsS0FBRCxFQUFRLE1BQVIsR0FBQTtBQUNOLFlBQUEsd0NBQUE7QUFBQSxRQUFBLE9BQUEsR0FBVSxDQUFBLENBQUUsc0NBQUYsQ0FBVixDQUFBO0FBQUEsUUFDQSxjQUFBLEdBQWlCLENBQUEsQ0FBRSxvQ0FBRixDQURqQixDQUFBO0FBQUEsUUFFQSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQVAsRUFBZSxTQUFDLEtBQUQsRUFBUSxPQUFSLEdBQUE7aUJBQ2IsY0FBYyxDQUFDLE1BQWYsQ0FDRSw2Q0FBQSxHQUVjLE9BQU8sQ0FBQyxLQUZ0QixHQUU0QixvREFGNUIsR0FHa0IsT0FBTyxDQUFDLEtBSDFCLEdBR2dDLGlEQUpsQyxFQURhO1FBQUEsQ0FBZixDQUZBLENBQUE7QUFBQSxRQWFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsY0FBZixDQWJBLENBQUE7QUFBQSxRQWNBLE9BQU8sQ0FBQyxRQUFSLENBQWlCLElBQUMsQ0FBQyxjQUFuQixDQWRBLENBQUE7QUFBQSxRQWVBLEtBQUssQ0FBQyxXQUFOLENBQWtCLE9BQWxCLENBZkEsQ0FBQTtBQUFBLFFBZ0JBLGVBQUEsR0FBa0IsS0FBSyxDQUFDLElBQU4sQ0FBVyxpQkFBWCxDQWhCbEIsQ0FBQTtBQUFBLFFBaUJJLElBQUEsTUFBQSxDQUFPLE9BQVAsRUFBZ0IsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFDLENBQUMsTUFBaEIsRUFBd0I7QUFBQSxVQUMxQyxVQUFBLEVBQWUsZUFBRCxHQUFpQixzQkFEVztBQUFBLFVBRTFDLFVBQUEsRUFBZSxlQUFELEdBQWlCLHNCQUZXO1NBQXhCLENBQWhCLENBakJKLENBQUE7ZUFxQkEsUUFBQSxDQUFTLEdBQUEsR0FBSSxJQUFDLENBQUMsY0FBZixFQXRCTTtNQUFBLENBSFI7S0F0SEYsQ0FBQTtBQUFBLElBaUpBLENBQUEsQ0FBRSx1QkFBRixDQUEwQixDQUFDLE1BQTNCLENBQ0U7QUFBQSxNQUFBLFFBQUEsRUFBVSxRQUFWO0FBQUEsTUFDQSxTQUFBLEVBQVcsT0FEWDtBQUFBLE1BRUEsU0FBQSxFQUFXLGFBRlg7QUFBQSxNQUdBLGNBQUEsRUFBZ0IsZ0JBSGhCO0FBQUEsTUFJQSxNQUFBLEVBQ0U7QUFBQSxRQUFBLG1CQUFBLEVBQXFCLElBQXJCO0FBQUEsUUFDQSxNQUFBLEVBQVEsV0FEUjtBQUFBLFFBRUEsVUFBQSxFQUFZLElBRlo7QUFBQSxRQUdBLGNBQUEsRUFBZ0IsS0FIaEI7QUFBQSxRQUlBLGFBQUEsRUFBZSxNQUpmO0FBQUEsUUFLQSxTQUFBLEVBQ0U7QUFBQSxVQUFBLE1BQUEsRUFBUSxFQUFSO0FBQUEsVUFDQSxPQUFBLEVBQVMsQ0FEVDtBQUFBLFVBRUEsS0FBQSxFQUFPLEdBRlA7QUFBQSxVQUdBLFFBQUEsRUFBVSxDQUhWO0FBQUEsVUFJQSxZQUFBLEVBQWMsSUFKZDtTQU5GO09BTEY7S0FERixDQWpKQSxDQUFBO0FBQUEsSUFvS0EsQ0FBQSxDQUFFLHdCQUFGLENBQTJCLENBQUMsTUFBNUIsQ0FDRTtBQUFBLE1BQUEsUUFBQSxFQUFVLFFBQVY7QUFBQSxNQUNBLFNBQUEsRUFBVyxPQURYO0FBQUEsTUFFQSxTQUFBLEVBQVcsYUFGWDtBQUFBLE1BR0EsY0FBQSxFQUFnQixpQkFIaEI7QUFBQSxNQUlBLE1BQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLElBQU47QUFBQSxRQUNBLFVBQUEsRUFBYSx3Q0FEYjtBQUFBLFFBRUEsVUFBQSxFQUFZLHdDQUZaO0FBQUEsUUFHQSxhQUFBLEVBQWUsQ0FIZjtBQUFBLFFBSUEsY0FBQSxFQUFnQixDQUpoQjtBQUFBLFFBS0EsbUJBQUEsRUFBcUIsSUFMckI7QUFBQSxRQU1BLFlBQUEsRUFBYyxFQU5kO09BTEY7S0FERixDQXBLQSxDQUFBO0FBQUEsSUFtTEEsY0FBQSxHQUFxQixJQUFBLE1BQUEsQ0FBTyxrQkFBUCxFQUEyQjtBQUFBLE1BQzlDLElBQUEsRUFBTSxJQUR3QztBQUFBLE1BRTlDLFVBQUEsRUFBYSxpQ0FGaUM7QUFBQSxNQUc5QyxVQUFBLEVBQVksaUNBSGtDO0FBQUEsTUFJOUMsYUFBQSxFQUFlLENBSitCO0FBQUEsTUFLOUMsY0FBQSxFQUFnQixDQUw4QjtBQUFBLE1BTTlDLG1CQUFBLEVBQXFCLElBTnlCO0FBQUEsTUFPOUMsWUFBQSxFQUFjLEVBUGdDO0tBQTNCLENBbkxyQixDQUFBO0FBQUEsSUE4TEEsQ0FBQSxDQUFFLHdCQUFGLENBQTJCLENBQUMsS0FBNUIsQ0FBa0MsU0FBQyxDQUFELEdBQUE7QUFDaEMsTUFBQSxDQUFDLENBQUMsY0FBRixDQUFBLENBQUEsQ0FBQTtBQUFBLE1BQ0EsQ0FBQSxDQUFFLElBQUYsQ0FBSSxDQUFDLE1BQUwsQ0FBQSxDQUFhLENBQUMsSUFBZCxDQUFtQixHQUFuQixDQUF1QixDQUFDLFdBQXhCLENBQW9DLFVBQXBDLENBREEsQ0FBQTtBQUFBLE1BRUEsQ0FBQSxDQUFFLElBQUYsQ0FBSSxDQUFDLFFBQUwsQ0FBYyxVQUFkLENBRkEsQ0FBQTthQUdBLENBQUEsQ0FBRSxJQUFGLENBQU8sQ0FBQyxHQUFSLENBQVksTUFBWixFQUpnQztJQUFBLENBQWxDLENBOUxBLENBQUE7QUFBQSxJQW9NQSxDQUFBLENBQUUsMEJBQUYsQ0FBNkIsQ0FBQyxLQUE5QixDQUFvQyxTQUFDLENBQUQsR0FBQTtBQUNsQyxNQUFBLENBQUMsQ0FBQyxjQUFGLENBQUEsQ0FBQSxDQUFBO0FBQUEsTUFDQSxDQUFBLENBQUUsSUFBRixDQUFJLENBQUMsT0FBTCxDQUFhLFdBQWIsQ0FBeUIsQ0FBQyxJQUExQixDQUErQixvQkFBL0IsQ0FBb0QsQ0FBQyxXQUFyRCxDQUFpRSxVQUFqRSxDQURBLENBQUE7QUFBQSxNQUVBLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxRQUFMLENBQWMsVUFBZCxDQUZBLENBQUE7QUFBQSxNQUdBLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxPQUFMLENBQWEsV0FBYixDQUF5QixDQUFDLElBQTFCLENBQStCLDJCQUFBLEdBQTRCLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxJQUFMLENBQVUsTUFBVixDQUE1QixHQUE4QyxJQUE3RSxDQUFrRixDQUFDLFFBQW5GLENBQTRGLFVBQTVGLENBSEEsQ0FBQTthQUlBLENBQUEsQ0FBRSxJQUFGLENBQU8sQ0FBQyxHQUFSLENBQVksTUFBWixFQUxrQztJQUFBLENBQXBDLENBcE1BLENBQUE7QUFBQSxJQTJNQSxDQUFBLENBQUUsOENBQUYsQ0FBaUQsQ0FBQyxLQUFsRCxDQUFBLENBM01BLENBQUE7QUFBQSxJQTRNQSxDQUFBLENBQUUsOEJBQUYsQ0FBaUMsQ0FBQyxLQUFsQyxDQUFBLENBNU1BLENBQUE7V0E4TUEsQ0FBQSxDQUFFLGNBQUYsQ0FBaUIsQ0FBQyxJQUFsQixDQUF1QixTQUFBLEdBQUE7YUFDckIsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLE1BQVgsQ0FBa0IsTUFBbEIsQ0FBeUIsQ0FBQyxRQUExQixDQUFtQyxNQUFuQyxFQURxQjtJQUFBLENBQXZCLEVBaE5BO0VBQUEsQ0FBRixFQUREO0FBQUEsQ0FBRCxDQUFBLENBcU5FLE1Bck5GLENBQUEsQ0FBQSIsImZpbGUiOiJzaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCgkKSAtPlxuICAkLmZuLmV4dGVuZFxuICAgIGdwaG90bzogKG9wdGlvbnMpIC0+XG4gICAgICBzZXR0aW5ncyA9XG4gICAgICAgIHByb3ZpZGVyOiAnZm90b3JhbWEnXG5cbiAgICAgIHNldHRpbmdzID0gJC5leHRlbmQgc2V0dGluZ3MsIG9wdGlvbnNcbiAgICAgIHByb3ZpZGVyID0gJC5mbi5ncGhvdG8ucHJvdmlkZXJcblxuICAgICAgIyBib2R5IHNjcmlwdFxuICAgICAgcmV0dXJuIEAuZmlsdGVyKFwiW2hyZWYgXj0gaHR0cHNcXFxcOlxcXFwvXFxcXC9wbHVzXFxcXC5nb29nbGVcXFxcLmNvbVxcXFwvcGhvdG9zXVwiKS5lYWNoICgpIC0+XG4gICAgICAgICRsaW5rID0gJChAKVxuICAgICAgICB1cmwgPSBuZXcgVVJJKCRsaW5rLmF0dHIoJ2hyZWYnKSlcbiAgICAgICAgdXNlcklkID0gdXJsLnNlZ21lbnQoMSlcbiAgICAgICAgYWxidW1JZCA9IHVybC5zZWdtZW50KDMpXG4gICAgICAgICQuZ2V0SlNPTihcbiAgICAgICAgICBcImh0dHBzOi8vcGljYXNhd2ViLmdvb2dsZS5jb20vZGF0YS9mZWVkL2FwaS91c2VyLyN7dXNlcklkfS9hbGJ1bWlkLyN7YWxidW1JZH0/a2luZD1waG90byZhY2Nlc3M9cHVibGljJmFsdD1qc29uLWluLXNjcmlwdCZjYWxsYmFjaz0/XCIsXG4gICAgICAgICAgKGRhdGEsIHN0YXR1cykgLT5cbiAgICAgICAgICAgIGltYWdlcyA9IGRhdGEuZmVlZC5lbnRyeS5tYXAgKGltYWdlKSAtPlxuICAgICAgICAgICAgICB1cmwgPSAgbmV3IFVSSShpbWFnZS5jb250ZW50LnNyYylcbiAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBcIiN7dXJsLnByb3RvY29sKCl9Oi8vI3t1cmwuaG9zdCgpfSN7dXJsLmRpcmVjdG9yeSgpfVwiXG4gICAgICAgICAgICAgIHByb3ZpZGVyW3NldHRpbmdzLnByb3ZpZGVyXS5maWx0ZXIuY2FsbChzZXR0aW5ncywgaW1hZ2VVcmwsIGltYWdlKVxuICAgICAgICAgICAgcHJvdmlkZXJbc2V0dGluZ3MucHJvdmlkZXJdLmluc2VydC5jYWxsKHNldHRpbmdzLCAkbGluaywgaW1hZ2VzKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIClcbiMgaW5pdCBkZWZhdWx0IHByb3ZpZGVyc1xuIyB0b2RvLW1lIG5lZWQgcmVzdCBhZnRlciByZWZhY3RvclxuICAkLmZuLmdwaG90by5wcm92aWRlciA9XG4gICAgZm90b3JhbWE6XG4gICAgICBmaWx0ZXI6IChpbWFnZVVybCwgaW1hZ2UpIC0+XG4gICAgICAgIGltZzogXCIje2ltYWdlVXJsfXcwL1wiXG4gICAgICAgIHRodW1iOiBcIiN7aW1hZ2VVcmx9dzY0LWg2NC9cIlxuICAgICAgaW5zZXJ0OiAoJGxpbmssIGltYWdlcykgLT5cbiAgICAgICAgJGZvdG9yYW1hID0gJCgnPGRpdiBjbGFzcz1cImZvdG9yYW1hXCI+PC9kaXY+JylcbiAgICAgICAgJGxpbmsucmVwbGFjZVdpdGgoJGZvdG9yYW1hKVxuICAgICAgICAkZm90b3JhbWEuZm90b3JhbWEgJC5leHRlbmQgZGF0YTogaW1hZ2VzLCBAXG4gICAgICAgIHJldHVyblxuICAgIGdncmlkOlxuICAgICAgZmlsdGVyOiAoaW1hZ2VVcmwsIGltYWdlKSAtPlxuICAgICAgICBpbWFnZVVybDogaW1hZ2VVcmxcbiAgICAgICAgZGF0YTogaW1hZ2VcbiAgICAgIGluc2VydDogKCRsaW5rLCBpbWFnZXMpIC0+XG4gICAgICAgICRnZ3JpZCA9ICQoJzxkaXYgY2xhc3M9XCJnZ3JpZFwiPjwvZGl2PicpXG4gICAgICAgIG9wdGlvbnMgPSBkYXRhOiBpbWFnZXNcbiAgICAgICAgaWYgJGxpbmsuYXR0cihcInRpdGxlXCIpP1xuICAgICAgICAgIG9wdGlvbnNbJ3RlbXBsYXRlJ10gPSAgJGxpbmsuYXR0cihcInRpdGxlXCIpXG4gICAgICAgICRsaW5rLnJlcGxhY2VXaXRoKCRnZ3JpZClcbiAgICAgICAgJGdncmlkLmdncmlkICQuZXh0ZW5kIG9wdGlvbnMsIEBcbiAgICAgICAgJGdncmlkLmZpbmQoJ2EnKS5mbHVpZGJveCgpXG4gICAgICAgIHJldHVyblxuKSBqUXVlcnlcbiIsIigoJCkgLT5cbiAgJC5mbi5leHRlbmRcbiAgICBnZ3JpZDogKG9wdGlvbnMpIC0+XG4gICAgICAkdGhpcyA9IEBcblxuICAgICAgc2V0dGluZ3MgPVxuICAgICAgICBjb2x1bW5zOiA0XG4gICAgICAgIG1heFdpZHRoOiAxMTcwXG4gICAgICAgIHBhZGRpbmc6IDVcblxuICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZCBzZXR0aW5ncywgb3B0aW9uc1xuXG4gICAgICBtZXRob2RzID1cbiAgICAgICAgbWFrZVJvdzogKGltYWdlcykgLT5cbiAgICAgICAgICAkb3V0ID0gJChcIjxkaXYgZGF0YS1wYXJhZ3JhcGgtY291bnQ9JyN7aW1hZ2VzLmxlbmd0aH0nIGNsYXNzPSdyb3cnPjwvZGl2PlwiKVxuICAgICAgICAgIGNvbnN0YW50YSA9IDEvaW1hZ2VzLnJlZHVjZVJpZ2h0IChvbmUsIHR3bykgLT5cbiAgICAgICAgICAgIChpZiBvbmUuZGF0YSB0aGVuIDEvKE51bWJlcihvbmUuZGF0YS5ncGhvdG8kaGVpZ2h0LiR0KS9OdW1iZXIob25lLmRhdGEuZ3Bob3RvJHdpZHRoLiR0KSkgZWxzZSBvbmUpICtcdDEvKE51bWJlcih0d28uZGF0YS5ncGhvdG8kaGVpZ2h0LiR0KS9OdW1iZXIodHdvLmRhdGEuZ3Bob3RvJHdpZHRoLiR0KSkgaWYgaW1hZ2VzLmxlbmd0aCAhPSAxXG4gICAgICAgICAgZm9yIGltYWdlIGluIGltYWdlc1xuICAgICAgICAgICAgaWYgaW1hZ2VzLmxlbmd0aCAhPSAxXG4gICAgICAgICAgICAgIHdpZHRoID0gY29uc3RhbnRhLyhOdW1iZXIoaW1hZ2UuZGF0YS5ncGhvdG8kaGVpZ2h0LiR0KS9OdW1iZXIoaW1hZ2UuZGF0YS5ncGhvdG8kd2lkdGguJHQpKSAqIDEwMFxuICAgICAgICAgICAgICBtYXhXaWR0aCA9IE1hdGgucm91bmQoIHNldHRpbmdzLm1heFdpZHRoLzEwMCAqIHdpZHRoKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB3aWR0aCA9IDEwMFxuICAgICAgICAgICAgICBtYXhXaWR0aCA9IDBcbiAgICAgICAgICAgICRvdXQuYXBwZW5kIFwiXCJcIlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wnIHN0eWxlPSd3aWR0aDogI3t3aWR0aH0lOyc+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiN7aW1hZ2UuaW1hZ2VVcmx9L3cwL1wiPlxuICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0naW1nLXJlc3BvbnNpdmUnIHNyYz0nI3tpbWFnZS5pbWFnZVVybH0vdyN7bWF4V2lkdGh9LycgYWx0PScnIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgJHRoaXMuYXBwZW5kICRvdXRcbiAgICAgICAgICByZXR1cm5cblxuICAgICAgaW1hZ2VzID0gIG9wdGlvbnMuZGF0YVxuICAgICAgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlLnNwbGl0KCctJykgaWYgb3B0aW9ucy50ZW1wbGF0ZT9cbiAgICAgIGNodW5rOyBpID0gMDsgaXRlciA9IDBcbiAgICAgIHdoaWxlIGkgPCBpbWFnZXMubGVuZ3RoXG4gICAgICAgIGlmIHRlbXBsYXRlP1tpdGVyXVxuICAgICAgICAgICNhZGQgdGVtcGxhdGUgbGF5b3V0IHN1cHBvcnQgaW4gdGl0bGUgYXR0clxuICAgICAgICAgIGNodW5rID0gTnVtYmVyKHRlbXBsYXRlW2l0ZXJdKVxuICAgICAgICAgIGl0ZXIrK1xuICAgICAgICBlbHNlXG4gICAgICAgICAgI2RvIG5vdCBzaG93IDEgaW1tYWdlIHRvIGVuZCBncmlkZVxuICAgICAgICAgIGNodW5rID0gaWYgaW1hZ2VzLmxlbmd0aCAtIChpICsgc2V0dGluZ3MuY29sdW1ucykgPT0gMSB0aGVuIHNldHRpbmdzLmNvbHVtbnMgLSAxIGVsc2Ugc2V0dGluZ3MuY29sdW1uc1xuICAgICAgICBtZXRob2RzLm1ha2VSb3cgaW1hZ2VzLnNsaWNlKGksaStjaHVuaylcbiAgICAgICAgaSs9Y2h1bmtcbiAgICAgICMgYm9keSBzY3JpcHRcbiAgICAgIHJldHVybiBALmVhY2ggKCkgLT5cbiAgICAgICAgY29uc29sZS5sb2coJ2dncmlkJylcbiAgICAgICAgcmV0dXJuXG4pIGpRdWVyeVxuIiwiKCgkKSAtPlxuICAkIC0+XG4jICAgbWVudVxuICAgICQoJy5kcm9wZG93bi1mdWxsJykuaG92ZXIoLT5cbiAgICAgIGlmICghJChAKS5oYXNDbGFzcygnb3BlbicpKVxuICAgICAgICAkKEApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5kcm9wZG93bigndG9nZ2xlJylcbiAgICAsLT5cbiAgICAgIGlmICgkKEApLmhhc0NsYXNzKCdvcGVuJykpXG4gICAgICAgICQoQCkuZmluZCgnLmRyb3Bkb3duLXRvZ2dsZScpLmRyb3Bkb3duKCd0b2dnbGUnKVxuICAgIClcblxuIyAgIGh5cGhlbmF0ZVxuICAgICQoJy5oeXBoZXInKS5oeXBoZW5hdGUoJ3J1JylcblxuIyAgIHNsaWRlclxuICAgIFRpbWVySW50ZXJ2YWwgPSAoY2FsbGJhY2ssIGRlbGF5KSAtPlxuICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZFxuICAgICAgcmVtYWluaW5nID0gZGVsYXlcbiAgICAgIEBwYXVzZSA9IC0+XG4gICAgICAgIGNsZWFyVGltZW91dCB0aW1lcklkXG4gICAgICBAcmVzdW1lID0gLT5cbiAgICAgICAgY2xlYXJUaW1lb3V0IHRpbWVySWRcbiAgICAgICAgdGltZXJJZCA9IHNldEludGVydmFsKGNhbGxiYWNrLCByZW1haW5pbmcpXG4gICAgICBAcmVzdW1lKClcblxuICAgICQoJyNzZXJ2aWNlVGFicyBhOmZpcnN0JykudGFiKCdzaG93JylcblxuIyAgICBzbGlkZXJUaW1lciA9IG5ldyBUaW1lckludGVydmFsKCgtPlxuIyAgICAgICQoJyNzZXJ2aWNlU2xpZGVyIC5pY29uLXJpZ2h0JykuY2xpY2soKVxuIyAgICApLCAkKCcjc2VydmljZVNsaWRlcicpLmRhdGEoJ3NsaWRlclRpbWVvdXQnKSlcblxuICAgIHNsaWRlclRpbWVySG92ZXIgPSBudWxsXG4gICAgJCgnI3NlcnZpY2VUYWJzIC50YWInKS5ob3ZlciAtPlxuICAgICAgY2xlYXJUaW1lb3V0KHNsaWRlclRpbWVySG92ZXIpIGlmIHNsaWRlclRpbWVySG92ZXJcbiAgICAgIHNsaWRlclRpbWVySG92ZXIgPSBzZXRUaW1lb3V0KCAoKSA9PlxuICAgICAgICAkKEApLnRhYiAnc2hvdydcbiAgICAgICwgJCgnI3NlcnZpY2VTbGlkZXInKS5kYXRhKCdzbGlkZXJUaW1lb3V0SG92ZXInKSlcblxuIyAgICAkKCcjc2VydmljZVRhYnMgLnRhYiwgI3NlcnZpY2VTbGlkZXInKS5ob3ZlcihcbiMgICAgICAtPlxuIyAgICAgICAgc2xpZGVyVGltZXIucGF1c2UoKVxuIyAgICAgICwtPlxuIyAgICAgICAgc2xpZGVyVGltZXIucmVzdW1lKClcbiMgICAgKVxuICAgICQoJyNzZXJ2aWNlU2xpZGVyIC5pY29uLXJpZ2h0JykuY2xpY2sgLT5cbiAgICAgICRuZXh0ID0gJCgnI3NlcnZpY2VUYWJzIC5hY3RpdmUnKS5uZXh0KCkuZmluZCgnYScpXG4gICAgICAkbmV4dCA9ICQoJyNzZXJ2aWNlVGFicyBhOmZpcnN0JykgaWYgKCEkbmV4dC5sZW5ndGgpXG4gICAgICAkbmV4dC50YWIgJ3Nob3cnXG4gICAgJCgnI3NlcnZpY2VTbGlkZXIgLmljb24tbGVmdCcpLmNsaWNrIC0+XG4gICAgICAkbmV4dCA9ICQoJyNzZXJ2aWNlVGFicyAuYWN0aXZlJykucHJldigpLmZpbmQoJ2EnKVxuICAgICAgJG5leHQgPSAkKCcjc2VydmljZVRhYnMgYTpsYXN0JykgaWYgKCEkbmV4dC5sZW5ndGgpXG4gICAgICAkbmV4dC50YWIgJ3Nob3cnXG5cblxuIyAgIHdoeSB1c1xuICAgIHRyYW5zZm9ybSA9IChhLCBiKSAtPlxuICAgICAgIyBzZXQgdGhlIHN0YWdlIHNvIHJhbWpldCBjb3BpZXMgdGhlIHJpZ2h0IHN0eWxlcy4uLlxuICAgICAgYi5jbGFzc0xpc3QucmVtb3ZlICdoaWRkZW4nXG4gICAgICByYW1qZXQudHJhbnNmb3JtIGEsIGIsIGRvbmU6IC0+XG4gICAgICAgICMgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYXMgc29vbiBhcyB0aGUgdHJhbnNpdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgYi5jbGFzc0xpc3QucmVtb3ZlICdoaWRkZW4nXG4gICAgICAgIGlmKCQoYSkuaGFzQ2xhc3MoJ3doeXVzLWludHJvJykpXG4gICAgICAgICAgJCgnLndoeXVzJykuY3NzKCdtaW4taGVpZ2h0JywgJChiKS5maW5kKCcucm93JykuaW5uZXJIZWlnaHQoKSArIDIwKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgJCgnLndoeXVzJykuY3NzKCdtaW4taGVpZ2h0JywgJycpXG4gICAgICAjIC4uLnRoZW4gaGlkZSB0aGUgb3JpZ2luYWwgZWxlbWVudHMgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvblxuICAgICAgYS5jbGFzc0xpc3QuYWRkICdoaWRkZW4nXG4gICAgICBiLmNsYXNzTGlzdC5hZGQgJ2hpZGRlbidcblxuICAgICQoJy53aHl1cy1pbnRybycpLmNsaWNrIC0+IHRyYW5zZm9ybShALCBALm5leHRTaWJsaW5nKVxuICAgICQoJy53aHl1cy1kZXRhaWwnKS5jbGljayAtPiB0cmFuc2Zvcm0oQCwgQC5wcmV2aW91c1NpYmxpbmcpXG5cbiMgICBsaWdodGJveFxuICAgIGxpZ2h0Ym94ID0gKHNsZWN0b3IpIC0+XG4gICAgICAkKHNsZWN0b3IpLm1hZ25pZmljUG9wdXBcbiAgICAgICAgZGVsZWdhdGU6ICdhJ1xuICAgICAgICB0eXBlOiAnaW1hZ2UnXG4gICAgICAgIGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlXG4gICAgICAgIGNsb3NlQnRuSW5zaWRlOiBmYWxzZVxuICAgICAgICBtYWluQ2xhc3M6ICdtZnAtd2l0aC16b29tIG1mcC1pbWctbW9iaWxlJ1xuICAgICAgICBpbWFnZTpcbiAgICAgICAgICB2ZXJ0aWNhbEZpdDogdHJ1ZVxuICAgICAgICBnYWxsZXJ5OiBlbmFibGVkOiB0cnVlXG4gICAgICAgIHpvb206XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgIGR1cmF0aW9uOiAzMDBcbiAgICAgICAgICBvcGVuZXI6IChlbGVtZW50KSAtPlxuICAgICAgICAgICAgZWxlbWVudC5maW5kICdpbWcnXG5cbiAgICAkLmZuLmdwaG90by5wcm92aWRlclsnZ2dyaWQnXSA9XG4gICAgICBmaWx0ZXI6IChpbWFnZVVybCwgaW1hZ2UpIC0+XG4gICAgICAgIGltYWdlVXJsOiBpbWFnZVVybFxuICAgICAgICBkYXRhOiBpbWFnZVxuICAgICAgaW5zZXJ0OiAoJGxpbmssIGltYWdlcykgLT5cbiAgICAgICAgJGdncmlkID0gJCgnPGRpdiBjbGFzcz1cImdncmlkXCI+PC9kaXY+JylcbiAgICAgICAgb3B0aW9ucyA9IGRhdGE6IGltYWdlc1xuICAgICAgICBpZiAkbGluay5hdHRyKFwidGl0bGVcIik/XG4gICAgICAgICAgb3B0aW9uc1sndGVtcGxhdGUnXSA9ICAkbGluay5hdHRyKFwidGl0bGVcIilcbiAgICAgICAgJGxpbmsucmVwbGFjZVdpdGgoJGdncmlkKVxuICAgICAgICAkZ2dyaWQuZ2dyaWQgJC5leHRlbmQgb3B0aW9ucywgQFxuICAgICAgICBsaWdodGJveChcIi5nZ3JpZFwiKSBpZiBALmxpZ2h0Ym94XG5cbiAgICAkKCdhLmdwaG90by1nZ3JpZC1saWdodGJveCcpLmdwaG90byhcbiAgICAgIHByb3ZpZGVyOiAnZ2dyaWQnXG4gICAgICBjb2x1bW5zOiAzXG4gICAgICBtYXhXaWR0aDogMTE3MFxuICAgICAgcGFkZGluZzogNVxuICAgICAgbGlnaHRib3g6IHRydWVcbiAgICApXG5cbiAgICAkKCdhLmdwaG90by1nZ3JpZC1hYm91dCcpLmdwaG90byhcbiAgICAgIHByb3ZpZGVyOiAnZ2dyaWQnXG4gICAgICBjb2x1bW5zOiAyXG4gICAgICBtYXhXaWR0aDogNTU3XG4gICAgICBwYWRkaW5nOiA1XG4gICAgICB0ZW1wbGF0ZTogJzEtMi0yJ1xuICAgICAgbGlnaHRib3g6IHRydWVcbiAgICApXG5cbiMgICBnYWxsZXJ5XG4gICAgJC5mbi5ncGhvdG8ucHJvdmlkZXJbJ3N3aXBlciddID1cbiAgICAgIGZpbHRlcjogKGltYWdlVXJsLCBpbWFnZSktPlxuICAgICAgICBpbWFnZTogXCIje2ltYWdlVXJsfS8je0AuaW1hZ2VTaXplfS9cIlxuICAgICAgICB0aHVtYjogXCIje2ltYWdlVXJsfS8je0AudGh1bWJTaXplfS9cIlxuICAgICAgaW5zZXJ0OiAoJGxpbmssIGltYWdlcyktPlxuICAgICAgICAkc3dpcGVyID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jb250YWluZXJcIj48L2Rpdj4nKVxuICAgICAgICAkc3dpcGVyV3JhcHBlciA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItd3JhcHBlclwiPjwvZGl2PicpXG4gICAgICAgICQuZWFjaChpbWFnZXMsIChpbmRleCwgZWxlbWVudCktPlxuICAgICAgICAgICRzd2lwZXJXcmFwcGVyLmFwcGVuZChcbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZVwiPlxuICAgICAgICAgICAgICAgPGEgaHJlZj1cIiN7ZWxlbWVudC5pbWFnZX1cIiBkYXRhLWVmZmVjdD1cIm1mcC16b29tLWluXCI+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiN7ZWxlbWVudC50aHVtYn1cIiBjbGFzcz1cImltZy1yZXNwb25zaXZlXCIvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgICRzd2lwZXIuYXBwZW5kKCRzd2lwZXJXcmFwcGVyKVxuICAgICAgICAkc3dpcGVyLmFkZENsYXNzKEAuY29udGFpbmVyQ2xhc3MpXG4gICAgICAgICRsaW5rLnJlcGxhY2VXaXRoKCRzd2lwZXIpXG4gICAgICAgIGJ0bkNudHJTZWxlY3RvciA9ICRsaW5rLmRhdGEoXCJidXR0b25Db250YWluZXJcIilcbiAgICAgICAgbmV3IFN3aXBlcigkc3dpcGVyLCBqUXVlcnkuZXh0ZW5kKEAuc3dpcGVyLCB7XG4gICAgICAgICAgbmV4dEJ1dHRvbjogXCIje2J0bkNudHJTZWxlY3Rvcn0gLnN3aXBlci1idXR0b24tbmV4dFwiXG4gICAgICAgICAgcHJldkJ1dHRvbjogXCIje2J0bkNudHJTZWxlY3Rvcn0gLnN3aXBlci1idXR0b24tcHJldlwiXG4gICAgICAgIH0pKVxuICAgICAgICBsaWdodGJveChcIi4je0AuY29udGFpbmVyQ2xhc3N9XCIpXG5cbiAgICAkKCdhLnN3aXBlci1saW5rLWdhbGxlcnknKS5ncGhvdG8oXG4gICAgICBwcm92aWRlcjogJ3N3aXBlcidcbiAgICAgIGltYWdlU2l6ZTogJ3cxNjAwJ1xuICAgICAgdGh1bWJTaXplOiAndzMwMC1oMzAwLWMnXG4gICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci1nYWxsZXJ5J1xuICAgICAgc3dpcGVyOlxuICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlXG4gICAgICAgIGVmZmVjdDogJ2NvdmVyZmxvdydcbiAgICAgICAgZ3JhYkN1cnNvcjogdHJ1ZVxuICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2VcbiAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nXG4gICAgICAgIGNvdmVyZmxvdzpcbiAgICAgICAgICByb3RhdGU6IDUwXG4gICAgICAgICAgc3RyZXRjaDogMFxuICAgICAgICAgIGRlcHRoOiAxMDBcbiAgICAgICAgICBtb2RpZmllcjogMVxuICAgICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZVxuICAgIClcblxuICAgICQoJ2Euc3dpcGVyLWxpbmstY2Fyb3VzZWwnKS5ncGhvdG8oXG4gICAgICBwcm92aWRlcjogJ3N3aXBlcidcbiAgICAgIGltYWdlU2l6ZTogJ3cxNjAwJ1xuICAgICAgdGh1bWJTaXplOiAndzMwMC1oMjAwLWMnXG4gICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci1jYXJvdXNlbCdcbiAgICAgIHN3aXBlcjpcbiAgICAgICAgbG9vcDogdHJ1ZVxuICAgICAgICBuZXh0QnV0dG9uOiAgJyNzd2lwZXJDYXJvdXNlbEJ0biAuc3dpcGVyLWJ1dHRvbi1uZXh0J1xuICAgICAgICBwcmV2QnV0dG9uOiAnI3N3aXBlckNhcm91c2VsQnRuIC5zd2lwZXItYnV0dG9uLXByZXYnXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDRcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDRcbiAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICBzcGFjZUJldHdlZW46IDIwXG4gICAgKVxuXG4gICAgc3dpcGVyQ2Fyb3VzZWwgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNhcm91c2VsJywge1xuICAgICAgbG9vcDogdHJ1ZVxuICAgICAgbmV4dEJ1dHRvbjogICcjYnRuQ2xpZW50cyAuc3dpcGVyLWJ1dHRvbi1uZXh0J1xuICAgICAgcHJldkJ1dHRvbjogJyNidG5DbGllbnRzIC5zd2lwZXItYnV0dG9uLXByZXYnXG4gICAgICBzbGlkZXNQZXJWaWV3OiA0XG4gICAgICBzbGlkZXNQZXJHcm91cDogNFxuICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZVxuICAgICAgc3BhY2VCZXR3ZWVuOiAyMFxuICAgIH0pXG5cbiMgICBmb29kIHRhYnNcbiAgICAkKFwiI2Zvb2QgLm5hdi1idG5zLW1lbnUgYVwiKS5jbGljaygoZSktPlxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAkKEApLnBhcmVudCgpLmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKVxuICAgICAgJChAKS5hZGRDbGFzcygnc2VsZWN0ZWQnKVxuICAgICAgJCh0aGlzKS50YWIoJ3Nob3cnKVxuICAgIClcbiAgICAkKCcjZm9vZCAubmF2LWJ0bnMtcGVyc29uIGEnKS5jbGljaygoZSktPlxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAkKEApLmNsb3Nlc3QoJy50YWItcGFuZScpLmZpbmQoJy5uYXYtYnRucy1wZXJzb24gYScpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpXG4gICAgICAkKEApLmFkZENsYXNzKCdzZWxlY3RlZCcpXG4gICAgICAkKEApLmNsb3Nlc3QoJy50YWItcGFuZScpLmZpbmQoJy5uYXYtYnRucy1wZXJzb24gYVtocmVmPVwiJyskKEApLmF0dHIoJ2hyZWYnKSsnXCJdJykuYWRkQ2xhc3MoJ3NlbGVjdGVkJylcbiAgICAgICQodGhpcykudGFiKCdzaG93JylcbiAgICApXG4gICAgJCgnI2Zvb2QgLm5hdi1idG5zLXBlcnNvbjpoaWRkZW4gYTpudGgtY2hpbGQoMSknKS5jbGljaygpXG4gICAgJCgnI2Zvb2QgLm5hdi1idG5zLW1lbnUgYTpmaXJzdCcpLmNsaWNrKClcblxuICAgICQoJyNmb29kIC50YWJsZScpLmVhY2goKCktPlxuICAgICAgJCgndHIudGQnKS5maWx0ZXIoJzpvZGQnKS5hZGRDbGFzcygnZXZlbicpXG5cbiAgKVxuKSBqUXVlcnlcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==