(function($) {
  $.fn.extend({
    gphoto: function(options) {
      var provider, settings;
      settings = {
        provider: 'fotorama'
      };
      settings = $.extend(settings, options);
      provider = $.fn.gphoto.provider;
      return this.filter("[href ^= https\\:\\/\\/plus\\.google\\.com\\/photos]").each(function() {
        var $link, albumId, url, userId;
        $link = $(this);
        url = new URI($link.attr('href'));
        userId = url.segment(1);
        albumId = url.segment(3);
        return $.getJSON("https://picasaweb.google.com/data/feed/api/user/" + userId + "/albumid/" + albumId + "?kind=photo&access=public&alt=json-in-script&callback=?", function(data, status) {
          var images;
          images = data.feed.entry.map(function(image) {
            var imageUrl;
            url = new URI(image.content.src);
            imageUrl = (url.protocol()) + "://" + (url.host()) + (url.directory());
            return provider[settings.provider].filter.call(settings, imageUrl, image);
          });
          provider[settings.provider].insert.call(settings, $link, images);
        });
      });
    }
  });
  return $.fn.gphoto.provider = {
    fotorama: {
      filter: function(imageUrl, image) {
        return {
          img: imageUrl + "w0/",
          thumb: imageUrl + "w64-h64/"
        };
      },
      insert: function($link, images) {
        var $fotorama;
        $fotorama = $('<div class="fotorama"></div>');
        $link.replaceWith($fotorama);
        $fotorama.fotorama($.extend({
          data: images
        }, this));
      }
    },
    ggrid: {
      filter: function(imageUrl, image) {
        return {
          imageUrl: imageUrl,
          data: image
        };
      },
      insert: function($link, images) {
        var $ggrid, options;
        $ggrid = $('<div class="ggrid"></div>');
        options = {
          data: images
        };
        if ($link.attr("title") != null) {
          options['template'] = $link.attr("title");
        }
        $link.replaceWith($ggrid);
        $ggrid.ggrid($.extend(options, this));
        $ggrid.find('a').fluidbox();
      }
    }
  };
})(jQuery);

(function($) {
  return $.fn.extend({
    ggrid: function(options) {
      var $this, chunk, i, images, iter, methods, settings, template;
      $this = this;
      settings = {
        columns: 4,
        maxWidth: 1170,
        padding: 5
      };
      settings = $.extend(settings, options);
      methods = {
        makeRow: function(images) {
          var $out, constanta, image, j, len, maxWidth, width;
          $out = $("<div data-paragraph-count='" + images.length + "' class='row'></div>");
          constanta = 1 / images.reduceRight(function(one, two) {
            if (images.length !== 1) {
              return (one.data ? 1 / (Number(one.data.gphoto$height.$t) / Number(one.data.gphoto$width.$t)) : one) + 1 / (Number(two.data.gphoto$height.$t) / Number(two.data.gphoto$width.$t));
            }
          });
          for (j = 0, len = images.length; j < len; j++) {
            image = images[j];
            if (images.length !== 1) {
              width = constanta / (Number(image.data.gphoto$height.$t) / Number(image.data.gphoto$width.$t)) * 100;
              maxWidth = Math.round(settings.maxWidth / 100 * width);
            } else {
              width = 100;
              maxWidth = 0;
            }
            $out.append("<div class='col' style='width: " + width + "%;'>\n  <a href=\"" + image.imageUrl + "/w0/\">\n    <img class='img-responsive' src='" + image.imageUrl + "/w" + maxWidth + "/' alt='' />\n  </a>\n</div>");
          }
          $this.append($out);
        }
      };
      images = options.data;
      if (options.template != null) {
        template = options.template.split('-');
      }
      chunk;
      i = 0;
      iter = 0;
      while (i < images.length) {
        if (template != null ? template[iter] : void 0) {
          chunk = Number(template[iter]);
          iter++;
        } else {
          chunk = images.length - (i + settings.columns) === 1 ? settings.columns - 1 : settings.columns;
        }
        methods.makeRow(images.slice(i, i + chunk));
        i += chunk;
      }
      return this.each(function() {
        console.log('ggrid');
      });
    }
  });
})(jQuery);

(function($) {
  return $(function() {
    var $formOrder, TimerInterval, lightboxImages, magnificPopup, sliderTimerHover, swiperCarousel, transform;
    $('.dropdown-full').hover(function() {
      if (!$(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    }, function() {
      if ($(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    });
    $('.hypher').hyphenate('ru');
    TimerInterval = function(callback, delay) {
      var remaining, timerId;
      timerId = void 0;
      remaining = delay;
      this.pause = function() {
        return clearTimeout(timerId);
      };
      this.resume = function() {
        clearTimeout(timerId);
        return timerId = setInterval(callback, remaining);
      };
      return this.resume();
    };
    $('#serviceTabs a:first').tab('show');
    sliderTimerHover = null;
    $('#serviceTabs .tab').hover(function() {
      if (sliderTimerHover) {
        clearTimeout(sliderTimerHover);
      }
      return sliderTimerHover = setTimeout((function(_this) {
        return function() {
          return $(_this).tab('show');
        };
      })(this), $('#serviceSlider').data('sliderTimeoutHover'));
    });
    $('#serviceSlider .icon-right').click(function() {
      var $next;
      $next = $('#serviceTabs .active').next().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:first');
      }
      return $next.tab('show');
    });
    $('#serviceSlider .icon-left').click(function() {
      var $next;
      $next = $('#serviceTabs .active').prev().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:last');
      }
      return $next.tab('show');
    });
    transform = function(a, b) {
      b.classList.remove('hidden');
      ramjet.transform(a, b, {
        done: function() {
          b.classList.remove('hidden');
          if ($(a).hasClass('whyus-intro')) {
            return $('.whyus').css('min-height', $(b).find('.row').innerHeight() + 20);
          } else {
            return $('.whyus').css('min-height', '');
          }
        }
      });
      a.classList.add('hidden');
      return b.classList.add('hidden');
    };
    $('.whyus-intro').click(function() {
      return transform(this, this.nextSibling);
    });
    $('.whyus-detail').click(function() {
      return transform(this, this.previousSibling);
    });
    magnificPopup = $.magnificPopup.instance;
    $('.btn-order').magnificPopup({
      type: 'inline',
      preloader: false,
      focus: '#inputName',
      removalDelay: 500,
      mainClass: 'mfp-move-from-top',
      callbacks: {
        beforeOpen: function() {
          return this.st.mainClass = 'mfp-move-from-top';
        }
      }
    });
    $('#inputDate').datepicker({
      language: 'ru',
      orientation: 'bottom'
    });
    $formOrder = $('#form-order');
    $formOrder.validator().on('submit', function(e) {
      if (e.isDefaultPrevented()) {
        return console.log('validation fail');
      } else {
        e.preventDefault();
        return $.ajax({
          type: 'POST',
          url: $formOrder.attr('action'),
          data: $formOrder.serialize(),
          dataType: "json",
          success: function(data) {
            $('#popup-alert-success').magnificPopup({
              items: {
                src: '#popup-alert-success',
                type: 'inline'
              }
            }).magnificPopup('open');
            return setTimeout(function() {
              $formOrder[0].reset();
              return magnificPopup.close();
            }, 700);
          },
          error: function(xhr, str) {
            console.error(xhr);
            console.error(str);
            return alert('Возникла ошибка: ' + xhr.responseCode);
          }
        });
      }
    });
    lightboxImages = function(slector) {
      return $(slector).magnificPopup({
        delegate: 'a',
        type: 'image',
        closeOnContentClick: false,
        closeBtnInside: false,
        mainClass: 'mfp-with-zoom mfp-img-mobile',
        image: {
          verticalFit: true
        },
        gallery: {
          enabled: true
        },
        zoom: {
          enabled: true,
          duration: 300,
          opener: function(element) {
            return element.find('img');
          }
        }
      });
    };
    $.fn.gphoto.provider['ggrid'] = {
      filter: function(imageUrl, image) {
        return {
          imageUrl: imageUrl,
          data: image
        };
      },
      insert: function($link, images) {
        var $ggrid, options;
        $ggrid = $('<div class="ggrid"></div>');
        options = {
          data: images
        };
        if ($link.attr("title") != null) {
          options['template'] = $link.attr("title");
        }
        $link.replaceWith($ggrid);
        $ggrid.ggrid($.extend(options, this));
        if (this.lightbox) {
          return lightboxImages(".ggrid");
        }
      }
    };
    $('a.gphoto-ggrid-lightbox').gphoto({
      provider: 'ggrid',
      columns: 3,
      maxWidth: 1170,
      padding: 5,
      lightbox: true
    });
    $('a.gphoto-ggrid-about').gphoto({
      provider: 'ggrid',
      columns: 2,
      maxWidth: 557,
      padding: 5,
      template: '1-2-2',
      lightbox: true
    });
    $.fn.gphoto.provider['swiper'] = {
      filter: function(imageUrl, image) {
        return {
          image: imageUrl + "/" + this.imageSize + "/",
          thumb: imageUrl + "/" + this.thumbSize + "/"
        };
      },
      insert: function($link, images) {
        var $swiper, $swiperWrapper, btnCntrSelector;
        $swiper = $('<div class="swiper-container"></div>');
        $swiperWrapper = $('<div class="swiper-wrapper"></div>');
        $.each(images, function(index, element) {
          return $swiperWrapper.append("<div class=\"swiper-slide\">\n   <a href=\"" + element.image + "\" data-effect=\"mfp-zoom-in\">\n      <img src=\"" + element.thumb + "\" class=\"img-responsive\"/>\n    </a>\n</div>");
        });
        $swiper.append($swiperWrapper);
        $swiper.addClass(this.containerClass);
        $link.replaceWith($swiper);
        btnCntrSelector = $link.data("buttonContainer");
        new Swiper($swiper, jQuery.extend(this.swiper, {
          nextButton: btnCntrSelector + " .swiper-button-next",
          prevButton: btnCntrSelector + " .swiper-button-prev"
        }));
        return lightboxImages("." + this.containerClass);
      }
    };
    $('a.swiper-link-gallery').gphoto({
      provider: 'swiper',
      imageSize: 'w1600',
      thumbSize: 'w300-h300-c',
      containerClass: 'swiper-gallery',
      swiper: {
        paginationClickable: true,
        effect: 'coverflow',
        grabCursor: true,
        centeredSlides: false,
        slidesPerView: 'auto',
        coverflow: {
          rotate: 50,
          stretch: 0,
          depth: 100,
          modifier: 1,
          slideShadows: true
        }
      }
    });
    $('a.swiper-link-carousel').gphoto({
      provider: 'swiper',
      imageSize: 'w1600',
      thumbSize: 'w300-h200-c',
      containerClass: 'swiper-carousel',
      swiper: {
        loop: true,
        nextButton: '#swiperCarouselBtn .swiper-button-next',
        prevButton: '#swiperCarouselBtn .swiper-button-prev',
        slidesPerView: 4,
        slidesPerGroup: 4,
        paginationClickable: true,
        spaceBetween: 20
      }
    });
    swiperCarousel = new Swiper('.swiper-carousel', {
      loop: true,
      nextButton: '#btnClients .swiper-button-next',
      prevButton: '#btnClients .swiper-button-prev',
      slidesPerView: 4,
      slidesPerGroup: 4,
      paginationClickable: true,
      spaceBetween: 20
    });
    $("#food .nav-btns-menu a").click(function(e) {
      e.preventDefault();
      $(this).parent().find('a').removeClass('selected');
      $(this).addClass('selected');
      return $(this).tab('show');
    });
    $('#food .nav-btns-person a').click(function(e) {
      e.preventDefault();
      $(this).closest('.tab-pane').find('.nav-btns-person a').removeClass('selected');
      $(this).addClass('selected');
      $(this).closest('.tab-pane').find('.nav-btns-person a[href="' + $(this).attr('href') + '"]').addClass('selected');
      return $(this).tab('show');
    });
    $('#food .nav-btns-person:hidden a:nth-child(1)').click();
    $('#food .nav-btns-menu a:first').click();
    return $('#food .table').each(function() {
      return $('tr.td').filter(':odd').addClass('even');
    });
  });
})(jQuery);

//# sourceMappingURL=data:application/json;base64,