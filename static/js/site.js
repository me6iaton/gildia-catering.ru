(function($) {
  return $.fn.extend({
    gphoto: function(options) {
      var provider, settings;
      settings = {
        provider: {
          name: 'fotorama'
        }
      };
      settings = $.extend(settings, options);
      provider = {
        fotorama: {
          filter: function(imageUrl, image) {
            return {
              img: imageUrl + "w0/",
              thumb: imageUrl + "w64-h64/"
            };
          },
          insert: function($link, images) {
            var $fotorama;
            $fotorama = $('<div class="fotorama"></div>');
            $link.replaceWith($fotorama);
            $fotorama.fotorama($.extend({
              data: images
            }, settings.provider));
          }
        },
        ggrid: {
          filter: function(imageUrl, image) {
            return {
              imageUrl: imageUrl,
              data: image
            };
          },
          insert: function($link, images) {
            var $ggrid;
            $ggrid = $('<div class="ggrid"></div>');
            options = {
              data: images
            };
            if ($link.attr("title") != null) {
              options['template'] = $link.attr("title");
            }
            $link.replaceWith($ggrid);
            $ggrid.ggrid($.extend(options, settings.provider));
            $ggrid.find('a').fluidbox();
          }
        }
      };
      return this.filter("[href ^= https\\:\\/\\/plus\\.google\\.com\\/photos]").each(function() {
        var $link, albumId, url, userId;
        $link = $(this);
        url = new URI($link.attr('href'));
        userId = url.segment(1);
        albumId = url.segment(3);
        return $.getJSON("https://picasaweb.google.com/data/feed/api/user/" + userId + "/albumid/" + albumId + "?kind=photo&access=public&alt=json-in-script&callback=?", function(data, status) {
          var images;
          images = data.feed.entry.map(function(image) {
            var imageUrl;
            url = new URI(image.content.src);
            imageUrl = (url.protocol()) + "://" + (url.host()) + (url.directory());
            if (settings.filter) {
              return settings.filter(imageUrl, image);
            } else {
              return provider[settings.provider.name].filter(imageUrl, image);
            }
          });
          if (settings.insert) {
            settings.insert($link, images);
          } else {
            provider[settings.provider.name].insert($link, images);
          }
        });
      });
    }
  });
})(jQuery);

(function($) {
  return $(function() {
    var TimerInterval, sliderTimerHover, swiperCarousel, transform;
    console.log("DOM is ready");
    $('.dropdown-full').hover(function() {
      if (!$(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    }, function() {
      if ($(this).hasClass('open')) {
        return $(this).find('.dropdown-toggle').dropdown('toggle');
      }
    });
    TimerInterval = function(callback, delay) {
      var remaining, timerId;
      timerId = void 0;
      remaining = delay;
      this.pause = function() {
        return clearTimeout(timerId);
      };
      this.resume = function() {
        clearTimeout(timerId);
        return timerId = setInterval(callback, remaining);
      };
      return this.resume();
    };
    $('#serviceTabs a:first').tab('show');
    sliderTimerHover = null;
    $('#serviceTabs .tab').hover(function() {
      if (sliderTimerHover) {
        clearTimeout(sliderTimerHover);
      }
      return sliderTimerHover = setTimeout((function(_this) {
        return function() {
          return $(_this).tab('show');
        };
      })(this), $('#serviceSlider').data('sliderTimeoutHover'));
    });
    $('#serviceSlider .icon-right').click(function() {
      var $next;
      $next = $('#serviceTabs .active').next().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:first');
      }
      return $next.tab('show');
    });
    $('#serviceSlider .icon-left').click(function() {
      var $next;
      $next = $('#serviceTabs .active').prev().find('a');
      if (!$next.length) {
        $next = $('#serviceTabs a:last');
      }
      return $next.tab('show');
    });
    transform = function(a, b) {
      b.classList.remove('hidden');
      ramjet.transform(a, b, {
        done: function() {
          b.classList.remove('hidden');
          if ($(a).hasClass('whyus-intro')) {
            return $('.whyus').css('min-height', $(b).find('.row').innerHeight() + 20);
          } else {
            return $('.whyus').css('min-height', '');
          }
        }
      });
      a.classList.add('hidden');
      return b.classList.add('hidden');
    };
    $('.whyus-intro').click(function() {
      return transform(this, this.nextSibling);
    });
    $('.whyus-detail').click(function() {
      return transform(this, this.previousSibling);
    });
    $('.hypher').hyphenate('ru');
    $('a.swiper-link-gallery').gphoto({
      filter: function(imageUrl, image) {
        return {
          img: imageUrl + "/w1200/",
          thumb: imageUrl + "/w300-h300-c/"
        };
      },
      insert: function($link, images) {
        var $swiper, $swiperWrapper, swiperGallery;
        $swiper = $('<div class="swiper-gallery swiper-container"></div>');
        $swiperWrapper = $('<div class="swiper-wrapper"></div>');
        $.each(images, function(index, element) {
          return $swiperWrapper.append('<div class="swiper-slide"> <a href="' + element.img + '" data-effect="mfp-zoom-in"> <img src="' + element.thumb + '" alt=""/> </a> </div>');
        });
        $swiper.append($swiperWrapper);
        $swiper.append('<div class="swiper-button-prev swiper-button-black"></div> <div class="swiper-button-next swiper-button-black"></div>');
        $link.replaceWith($swiper);
        swiperGallery = new Swiper('.swiper-gallery', {
          loop: true,
          nextButton: '.swiper-button-next',
          prevButton: '.swiper-button-prev',
          effect: 'coverflow',
          grabCursor: true,
          centeredSlides: true,
          slidesPerView: 'auto',
          coverflow: {
            rotate: 50,
            stretch: 0,
            depth: 100,
            modifier: 1,
            slideShadows: true
          }
        });
        return $('.swiper-gallery').magnificPopup({
          delegate: 'a',
          type: 'image',
          closeOnContentClick: false,
          closeBtnInside: false,
          mainClass: 'mfp-with-zoom mfp-img-mobile',
          image: {
            verticalFit: true
          },
          gallery: {
            enabled: true
          },
          zoom: {
            enabled: true,
            duration: 300,
            opener: function(element) {
              return element.find('img');
            }
          }
        });
      }
    });
    return swiperCarousel = new Swiper('.swiper-carousel', {
      pagination: '.swiper-pagination',
      nextButton: '.swiper-button-next',
      prevButton: '.swiper-button-prev',
      slidesPerView: 6,
      paginationClickable: true,
      spaceBetween: 30
    });
  });
})(jQuery);

//# sourceMappingURL=data:application/json;base64,