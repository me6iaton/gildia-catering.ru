@import "variables";

// Responsive utilities
// -------------------------
@mixin respond-to($media) {
  @if $media == xs {
    @media  (max-width: $screen-xs-max ) { @content; }
  }
  //@else if $media == ms  {
  //  @media (min-width: $screen-xs) and (max-width: $screen-sm - 1) { @content; }
  //}
  @else if $media == sm {
    @media  (min-width: $screen-sm-min) and (max-width: $screen-sm-max) { @content; }
  }
  @else if $media == md {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) { @content; }
  }
  @else if $media == lg {
    @media (min-width: $screen-lg-min) { @content; }
  }
  @else if $media == max-md {
    @media (max-width: $screen-md-max) { @content; }
  }
  @else if $media == max-sm{
    @media  (max-width: $screen-sm-max) { @content; }
  }
  //@else if $media == max-ms{
  //  @media  (max-width: $screen-ms-max ) { @content; }
  //}
  @else if $media == min-md{
    @media  (min-width: $screen-md-min) { @content; }
  }
}


@mixin borderRem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $font-size-base;
  $px-values: ();
  $rem-values: ();

  @each $value in $values {
    @if type-of($value) == number
        and not unitless($value)
        and (unit($value) == px) {
      $px-values: append($px-values, $value);
      $new-rem-value: $value / $font-size;
      $rem-values: append($rem-values, #{$new-rem-value}rem)
    }

    @if type-of($value) != number {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value);
    }

  }
  #{$property}: $px-values;
  #{$property}: $rem-values;

}
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $font-size-base;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else if ($property != "border")
          and ($property != "border-top")
          and ($property != "border-left")
          and ($property != "border-right")
          and ($property != "border-bottom") {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    } @else if (type-of($value) != number)
          and (($property == "border")
          or ($property == "border-top")
          or ($property == "border-left")
          or ($property == "border-right")
          or ($property == "border-bottom")) {
      //if the property is border
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@function em($px, $base: $font-size-base) {
  @return ($px / $base) * 1em;
}
